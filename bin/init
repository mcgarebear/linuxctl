#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail

# help writes usage information to the console.
help () {
  local -r executable=${1}
  cat << EOF
${executable} [flag..]

SYNOPSIS:
  init intitializes the system by configuring the home directory, shell, and
  prompt for the system.

FLAGS:
-h, --help
  Display usage and exit.

OPTIONS:
--shell
  Path to shell. Defaults to \`${SHELL}\`.
EOF
}

# main is the entry point of the script. It returns zero upon successful
# execution. If an error was encountered during execution, it returns non-zero.
main () {
  local -r __file_path=$(realpath $0)
  local -r __file_name=$(basename "${__file_path}")
  local -r __file_dir=$(dirname "${__file_path}")
  local -r __timestamp=$(date +"%Y%m%d-%H%M%S")

  local shell="${SHELL}"

  while test $# -gt 0; do
    case "$1" in
      -h | --help)
        help "${__file_name}"
        return 0
        ;;
      --shell)
        shell="${2}"
        shift 2
        ;;
      *)
        break
        ;;
    esac
  done

  shopt -s autocd
  shopt -s cdspell
  shopt -s checkwinsize
  shopt -s direxpand
  shopt -s dirspell
  shopt -s extglob
  shopt -s failglob
  shopt -s globstar
  shopt -s histappend
  shopt -s histreedit
  shopt -s histverify

  [[ -d "${HOME}/.linuxctl" ]] || mkdir -p "${HOME}/.linuxctl"
  [[ -d "${HOME}/bin" ]] || mkdir -p "${HOME}/bin"
  [[ -d "${HOME}/code" ]] || mkdir -p "${HOME}/code"

  local -r config_dir=$(realpath "${__file_dir}/../config")
  if ! [[ -d "${config_dir}" ]]; then
    return 0
  fi

  cp --archive "${config_dir}/git/.gitconfig" "${HOME}"
  cp --archive "${config_dir}/git/.gitignore" "${HOME}"
  cp --archive "${config_dir}/home/.inputrc" "${HOME}"
  cp --archive "${config_dir}/vim/.vimrc" "${HOME}"

  [[ -f "${config_dir}/home/.path" ]] && source "${config_dir}/home/.path"
  [[ -f "${config_dir}/home/.prompt" ]] && source "${config_dir}/home/.prompt"

  /usr/bin/env "${shell}"

  return 0
}

main $@
